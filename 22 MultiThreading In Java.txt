                               MultiThreading Concepts in JAVA [Assignment Questions/Answers]  13 Mar’23


ANS 01:

Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a process.

Importance-> 
Java supports multithreading through Thread class. Java Thread allows us to create a lightweight process that executes some tasks. We can create multiple threads in our program and start them. Java runtime will take care of creating machine-level instructions and work with OS to execute them in parallel.





ANS 02:

Benefits of Multithreading:-

-> Improved throughput.
->Simultaneous and fully symmetric use of multiple processors for computation and I/O.
->Superior application responsiveness.
->Improved server responsiveness.
->Minimized system resource usage.
->Program structure simplification.
->Better communication.






ANS 03:


THREAD:

A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.
Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon. When code running in some thread creates a new Thread object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon.

When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class). The Java Virtual Machine continues to execute threads until either of the following occurs:

The exit method of class Runtime has been called and the security manager has permitted the exit operation to take place.
All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing an exception that propagates beyond the run method.
There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started. For example, a thread that computes primes larger than a stated value could be written as follows:

     class PrimeThread extends Thread {
         long minPrime;
         PrimeThread(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {
             // compute primes larger than minPrime
              . . .
         }
     }
 
The following code would then create a thread and start it running:

     PrimeThread p = new PrimeThread(143);
     p.start();
 
The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started. The same example in this other style looks like the following:

     class PrimeRun implements Runnable {
         long minPrime;
         PrimeRun(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {
             // compute primes larger than minPrime
              . . .
         }
     }








ANS 04:
 
1) Extending the Thread class
Example:

Mythreadisinrunningstate.
class MultithreadingDemo extends Thread
{
public void run()
{
System.out.println("My thread is in running state.");
}
public static void main(String args[])
{
MultithreadingDemo obj=new MultithreadingDemo();
obj.start();
}
}
Output: My thread is in running state.






2)Implementing Runnable interface in Java
Example:

class MultithreadingDemo implements Runnable
{
public void run()
{
System.out.println("My thread is in running state.");
}
public static void main(String args[])
{
MultithreadingDemo obj=new MultithreadingDemo();
Thread Obj =new Thread(obj);
tobj.start();
}
} 


Output:  My thread is in running state.










ANS 05:

 Thread: It simply refers to the smallest units of the particular process. It has the ability to execute different
parts (referred to as thread) of the program at the same time.
Process: It simply refers to a program that is in execution i.e., an active program. A process can be handled
using PCB (Process Control Block).








ANS 06:

We can create daemon threads in java using the thread class setDaemon(true). It is used to mark the
current thread as daemon thread or user thread. isDaemon() method is generally used to check whether the
current thread is daemon or not. If the thread is a daemon, it will return true otherwise it returns false.

Example:
 
Program to illustrate the use of setDaemon() and isDaemon() method.
public class DaemonThread extends Thread
{
public DaemonThread(String name){
super(name);
}
public void run()
{
// Checking whether the thread is Daemon or not
if(Thread.currentThread().isDaemon())
{
System.out.println(getName() + " is Daemon thread");
}
else
{
System.out.println(getName() + " is User thread");
}
}

public static void main(String[] args)
{
DaemonThread t1 = new DaemonThread("t1");
DaemonThread t2 = new DaemonThread("t2");
DaemonThread t3 = new DaemonThread("t3");
// Setting user thread t1 to Daemon
t1.setDaemon(true);
// starting first 2 threads
t1.start();
t2.start();
// Setting user thread t3 to Daemon
t3.setDaemon(true);
t3.start();
}
}
Output:
t1 is Daemon thread
t3 is Daemon thread
t2 is User thread







Ans 07:

 -> wait(): As the name suggests, it is a non-static method that causes the current thread to wait and go to
sleep until some other threads call the notify () or notifyAll() method for the object’s monitor (lock). It simply
releases the lock and is mostly used for inter-thread communication. It is defined in the object class, and
should only be called from a synchronized context.
 
Example:
synchronized(monitor)
{
monitor.wait(); Here Lock Is Released by Current Thread
}

-> sleep(): As the name suggests, it is a static method that pauses or stops the execution of the current thread for
 some specified period. It doesn’t release the lock while waiting and is mostly used to introduce pause on
execution. It is defined in thread class, and no need to call from a synchronized context.

Example:

synchronized(monitor)
{
Thread.sleep(1000); Here Lock Is Held by The Current Thread
//after 1000 milliseconds, the current thread will wake up, or after we call that is
interrupt() method
}
