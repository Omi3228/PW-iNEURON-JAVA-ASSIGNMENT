                                              Inheritance Concepts in JAVA [Assignment Questions/Answers]  20 Feb’23


ANS 01: 

Inheritance: 
The technique of creating a new class by using an existing class functionality is called inheritance in Java.
In other words, inheritance is a process where a child class acquires all the properties and behaviours of the
parent class.




ANS 02:

-> A class from where a subclass inherits features is called superclass. It is also called base class or parent
class.
-> A class that inherits all the members (fields, method, and nested classes) from another class is called a
subclass. It is also called a derived class, child class, or extended class.



ANS 03:

 Inheritance can be implemented or achieved by using two keywords:

-> extends: extends is a keyword that is used for developing the inheritance between two classes and two interfaces.

-> implements: implements keyword is used for developing the inheritance between a class and interface.




ANS 04:

Polymorphism:

Polymorphism in OOP is the ability of an entity to take several forms. In other words, it refers to the ability of
an object (or a reference to an object) to take different forms of objects. It allows a common data-gathering
message to be sent to each class. Polymorphism encourages what is called ‘extendibility’ which means an
object or a class can have its uses extended.




ANS 05:

There are the following differences between method overloading and method overriding in Java. They are as follows:

1. Definition:

a. When a class has more than one method having the same name but different in parameters, it is called method overloading in Java.

b. When the method of superclass is overridden in subclass to provide more specific implementation, it is called method overriding in Java.

2. Argument type:

a. Argument type must be different (at least order) in overloading.
b. In overriding, argument type must be the same (including order).

3. Method signature:

a. The signature of the overloaded method must be different.
b. The signature of the overriding method must be the same.

4. Return type:

a. In method overloading, the return type can be the same or different.
b. In method overriding, the return type must be the same until Java 1.4 version but Java 1.5 onwards, method overriding can be done by changing the covariant return type.

5. Class: 

a. Method overloading is generally performed in the same class.
b. Method overriding is performed in two classes through inheritance (Is-A relationship).

6. Private/static/final method:

a. Private, static, and final method can be overloaded in Java.
b. Overriding concept is not applicable to private, static, and final method. Private, static, and final method can be overridden in Java.

7. Access modifiers: 

a. In overloading, access modifiers can be anything or different.
b. In overriding, subclass method’s access modifier must be the same or higher than superclass method access modifier i.e we cannot reduce the visibility subclass method while overriding.

8. Throws clause:

a. Exception thrown can be anything in the overloading concept.
b. In case of method overriding, if child class method throws any checked exception compulsory parent class method should throw the same checked exception are its parent otherwise we will get compile-time error but there is no restriction for an unchecked exception.

 
9. Polymorphism: 

a. Method overloading is also known as compile-time polymorphism, static polymorphism, or early binding.
b. Method overriding is also known as runtime polymorphism, dynamic polymorphism, or late binding.



ANS 06:

Abstraction:

 Abstraction is nothing but the quality of dealing with ideas rather than events. It basically deals with hiding
the internal details and showing the essential things to the user.
Abstract class Sports { // abstract class sports
Abstract void jump(); // abstract method }




ANS 07:

Difference between an abstract method and final method in Java:

Ans: The abstract method is incomplete while the final method is regarded as complete. The only way to use
an abstract method is by overriding it, but you cannot override a final method in Java.

Ex:

 final class A {
    public abstract void methodOne();
}

abstract class A {
    public final void methodOne() {

      }
}





ANS 08:

Final Class:

A class declared with the final keyword is known as the final class. A final class can’t be inherited by
subclasses. By using the final class, we can restrict the inheritance of the class. We can create a class as a final
class only if it is complete in nature, which means it must not be an abstract class. In java, all the wrapper
classes are final classes like String, Integer, etc.
If we try to inherit a final class, then the compiler throws an error at compilation time. We can’t create a class as
immutable without the final class.

Ex: 

final class ParentClass
{
void showData()
{
System.out.println("This is a method of final Parent class");
}
}
//It will throw compilation error
class ChildClass extends ParentClass
{
void showData()
{
System.out.println("This is a method of Child class");
}
}
class MainClass
{
public static void main(String arg[])
{
ParentClass obj = new ChildClass();
obj.showData();
}
}




ANS 09:

 Abstraction VS Encapsulation:

*Abstraction is a feature of OOPs that hides the unnecessary detail but shows the essential information.	*Encapsulation is also a feature of OOPs. It hides the code and data into a single entity or unit so that the data can be protected from the outside world.

*It solves an issue at the design level.	
*Encapsulation solves an issue at implementation level.

*It focuses on the external lookout.
*It focuses on internal working.

*It can be implemented using abstract classes and interfaces.
*It can be implemented by using the access modifiers (private, public, protected).

*It is the process of gaining information.
*It is the process of containing the information.

*In abstraction, we use abstract classes and interfaces to hide the code complexities.
*We use the getters and setters methods to hide the data.

*The objects are encapsulated that helps to perform abstraction.	
*The object need not to abstract that result in encapsulation.








ANS 10:

Compile Time Polymorphism VS Run time Polymorphism:

*In Compile time Polymorphism, the call is resolved by the compiler.	
*In Run time Polymorphism, the call is not resolved by the compiler.

*It is also known as Static binding, Early binding and overloading as well.
*It is also known as Dynamic binding, Late binding and overriding as well.

*Method overloading is the compile-time polymorphism where more than one methods share the same name with different parameters or signature and different return type.
*Method overriding is the runtime polymorphism having the same method with same parameters or signature but associated withcompared, different classes.

*It is achieved by function overloading and operator overloading.
*It is achieved by virtual functions and pointers.

*It provides fast execution because the method that needs to be executed is known early at the compile time.	
*It provides slow execution as compare to early binding because the method that needs to be executed is known at the runtime.

*Compile time polymorphism is less flexible as all things execute at compile time.
*Run time polymorphism is more flexible as all things execute at run time.

*Inheritance is not involved. 	
*Inheritance is involved.